/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package savio_estadisticas;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import savio_estadisticas.clases.Control.CategoriesControl;
import savio_estadisticas.clases.Control.CourseContent.Content;
import savio_estadisticas.clases.Control.CourseContent.Content_;
import savio_estadisticas.clases.Control.CourseContent.CourseContent;
import savio_estadisticas.clases.Control.CourseContent.GetCourseContent;
import savio_estadisticas.clases.Control.CourseContent.Module;
import savio_estadisticas.clases.Control.CourseContent.NodeContent;
import savio_estadisticas.clases.Control.CourseContent.countcontent;
import savio_estadisticas.clases.Control.GetAllCourses;
import savio_estadisticas.clases.Control.Progress;
import savio_estadisticas.clases.Course;
import savio_estadisticas.clases.Courses;
import savio_estadisticas.clases.Node;

/**
 *
 * @author amorelos
 */
public class SAVIO_ESTADISTICAS extends javax.swing.JFrame {

    /**
     * Creates new form SAVIO_ESTADISTICAS2
     */
    public SAVIO_ESTADISTICAS() {
        initComponents();
        jComboBox1.setVisible(false);
        getsheet.setVisible(false);
        openfile.setVisible(false);
        p = new Progress(jProgressBar1, jLabel1, jComboBox1, getsheet);
        p.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        getsheet = new javax.swing.JToggleButton();
        openfile = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Cargando...");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        getsheet.setText("Generar");
        getsheet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getsheetActionPerformed(evt);
            }
        });

        openfile.setText("Abrir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(getsheet, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(openfile, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 31, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getsheet)
                    .addComponent(openfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getsheetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getsheetActionPerformed
        String Name = (String) jComboBox1.getSelectedItem();
        System.out.println(Name);
        nodos_finales = p.getNodos_finales();
        for (Node x : nodos_finales) {
            if (x.getNameCategory().equals(Name)) {
                //Code to get content and generate sheet
                for (Course h : x.getCategoryCourses()) {
                    try {
                        GetCourseContent getcontent = new GetCourseContent(Integer.toString(h.getId()));
                        getcontent.start();
                        getcontent.join();
                        CourseContent coursecontent = getcontent.getCoursecontent();

                        for (Content contenido : coursecontent.getContent()) {
                            if (contenido.getVisible() == 1) {
                                for (Module mod : contenido.getModules()) {
                                    switch (mod.getModplural()) {
                                        //Actividades
                                        case "Etiquetas":
                                            h.getCountContent().upgradeEtiquetas();
                                            break;
                                        case "Tareas":
                                            h.getCountContent().upgradeTareas();
                                            break;
                                        case "Foros":
                                            h.getCountContent().upgradeForos();
                                            break;
                                        case "Chats":
                                            h.getCountContent().upgradeChats();
                                            break;
                                        case "Consultas":
                                            h.getCountContent().upgradeConsultas();
                                            break;
                                        case "Lecciones":
                                            h.getCountContent().upgradeLecciones();
                                            break;
                                        case "Wikis":
                                            h.getCountContent().upgradeWikis();
                                            break;
                                        case "Bases de datos":
                                            h.getCountContent().upgradeBases_de_datos();
                                            break;
                                        case "Paquetes SCORM":
                                            h.getCountContent().upgradePaquetes_SCORM();
                                            break;
                                        //Recursos
                                        case "Archivos":
                                            for(Content_ fileContent : mod.getContents()){
                                                h.getCountContent().upgradeArchivos();
                                            }
                                            break;
                                        case "URLs":
                                            h.getCountContent().upgradeURLs();
                                            break;
                                        case "Libros":
                                            h.getCountContent().upgradeLibros();
                                            break;
                                        case "Libros (Plantilla)":
                                            h.getCountContent().upgradeLibros();
                                            break;
                                    }
                                }
                            }
                        }

                    } catch (InterruptedException ex) {
                        Logger.getLogger(SAVIO_ESTADISTICAS.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
                
               
                break;
            }
        }
    }//GEN-LAST:event_getsheetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SAVIO_ESTADISTICAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SAVIO_ESTADISTICAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SAVIO_ESTADISTICAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SAVIO_ESTADISTICAS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SAVIO_ESTADISTICAS().setVisible(true);
            }
        });

        //ChargeAll();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton getsheet;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JToggleButton openfile;
    // End of variables declaration//GEN-END:variables
    private Progress p;
    private List<Node> nodos_finales;

}
